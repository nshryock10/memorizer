{"ast":null,"code":"var _jsxFileName = \"/Users/nickshryock/Documents/WebDevProjects/memorizer/src/Components/Practice.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport PracticeCard from \"./PracticeCard\";\nimport ToggleBar from \"./ToggleBar\";\nimport './Practice.css';\nimport { getLegend } from \"../utils/utils\";\nimport Review from \"./Review\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Practice() {\n  _s();\n  const [cards, setCards] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [cardIndex, setCardIndex] = useState();\n  const [phase, setPhase] = useState('input');\n  const [answer, setAnswer] = useState();\n  const [legend, setLegend] = useState();\n  useEffect(() => {\n    setIsLoading(true);\n    getCards();\n  }, []);\n  useEffect(() => {\n    if (cards && cardIndex) {\n      updateIndex();\n    }\n  }, [cardIndex]);\n  const updateIndex = async () => {\n    const setInputs = (leg, q) => {\n      console.log(leg);\n      console.log(q);\n    };\n    const legend = cards[cardIndex].legend;\n    const queue = cards[cardIndex].queue;\n    setInputs(legend, queue);\n  };\n  const getCards = async () => {\n    const setCardArry = data => {\n      const cardData = data;\n      setCards(cardData);\n    };\n    const cardArry = await getLegend();\n    setCardArry(cardArry);\n    setCardIndex(0);\n    setIsLoading(false);\n  };\n  const handleLeftClick = () => {\n    const currIndex = cardIndex;\n    if (currIndex > 0) {\n      setCardIndex(currIndex - 1);\n    } else if (currIndex === 0) {\n      setCardIndex(cards.length - 1);\n    }\n  };\n  const handleRightClick = () => {\n    const currIndex = cardIndex;\n    if (cardIndex < cards.length - 1) {\n      setCardIndex(currIndex + 1);\n    } else if (cardIndex === cards.length - 1) {\n      setCardIndex(0);\n    }\n  };\n  const handlePhaseChange = phaseChange => {\n    setPhase(phaseChange);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [isLoading && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-input\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 24\n    }, this), cardIndex >= 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(ToggleBar, {\n        queue: cards[cardIndex].queue,\n        handleRightClick: handleRightClick,\n        handleLeftClick: handleLeftClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this), phase === 'input' && /*#__PURE__*/_jsxDEV(PracticeCard, {\n        queue: cards[cardIndex].queue,\n        setAnswer: setAnswer,\n        handlePhaseChange: handlePhaseChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 21\n      }, this), phase === 'review' && /*#__PURE__*/_jsxDEV(Review, {\n        legend: cards[cardIndex].legend,\n        answer: answer,\n        handlePhaseChange: handlePhaseChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 14\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n}\n_s(Practice, \"WFd/60oyd5YbAZys2SKQCXFxJcY=\");\n_c = Practice;\nexport default Practice;\nvar _c;\n$RefreshReg$(_c, \"Practice\");","map":{"version":3,"names":["React","useState","useEffect","PracticeCard","ToggleBar","getLegend","Review","jsxDEV","_jsxDEV","Practice","_s","cards","setCards","isLoading","setIsLoading","cardIndex","setCardIndex","phase","setPhase","answer","setAnswer","legend","setLegend","getCards","updateIndex","setInputs","leg","q","console","log","queue","setCardArry","data","cardData","cardArry","handleLeftClick","currIndex","length","handleRightClick","handlePhaseChange","phaseChange","children","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/nickshryock/Documents/WebDevProjects/memorizer/src/Components/Practice.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport PracticeCard from \"./PracticeCard\";\nimport ToggleBar from \"./ToggleBar\";\nimport './Practice.css';\nimport { getLegend } from \"../utils/utils\";\nimport Review from \"./Review\";\n\nfunction Practice() {\n\n    const [cards, setCards] = useState([]);\n    const [isLoading, setIsLoading] = useState(false);\n    const [cardIndex, setCardIndex] = useState();\n    const [phase, setPhase] = useState('input');\n    const [answer, setAnswer] = useState();\n    const [legend, setLegend] = useState()\n\n    useEffect(() => {\n        setIsLoading(true)\n        getCards();\n    },[])\n\n    useEffect(() => {\n        if(cards && cardIndex){\n            updateIndex();\n        }\n\n    }, [cardIndex])\n\n    const updateIndex = async () => {\n\n        const setInputs = (leg, q) => {\n            console.log(leg)\n            console.log(q)\n        }\n        \n        const legend = cards[cardIndex].legend;\n        const queue = cards[cardIndex].queue;\n        setInputs(legend, queue)\n    }\n\n    const getCards = async () => {\n\n        const setCardArry = (data) => {\n            const cardData = data;\n            setCards(cardData);\n        }\n\n        const cardArry = await getLegend();\n        setCardArry(cardArry);\n        setCardIndex(0)\n        setIsLoading(false);\n    }\n\n    const handleLeftClick = () => {\n        const currIndex = cardIndex;\n        if(currIndex > 0){\n            setCardIndex(currIndex - 1)\n        }else if(currIndex === 0){\n            setCardIndex(cards.length - 1)\n        }\n    }\n\n    const handleRightClick = () => {\n        const currIndex = cardIndex;\n        if(cardIndex < cards.length - 1){\n            setCardIndex(currIndex + 1)\n        }else if(cardIndex === cards.length - 1){\n            setCardIndex(0)\n        }\n    }\n\n    const handlePhaseChange = phaseChange => {\n        setPhase(phaseChange)\n    }\n\n  return (\n    <div>\n        { isLoading && <p className='text-input'>Loading...</p> }\n        { cardIndex >= 0 &&\n            (<div>\n                <ToggleBar \n                    queue={cards[cardIndex].queue} \n                    handleRightClick={handleRightClick}  \n                    handleLeftClick={handleLeftClick}\n                />\n                {phase === 'input' && \n                    <PracticeCard \n                        queue={cards[cardIndex].queue} \n                        setAnswer={setAnswer}\n                        handlePhaseChange={handlePhaseChange}\n                    />\n                }\n                {phase === 'review' && \n                    <Review \n                        legend={cards[cardIndex].legend}\n                        answer={answer}\n                        handlePhaseChange={handlePhaseChange}\n                    />\n                }\n\n            </div>)\n        }\n    </div>\n  );\n}\n\nexport default Practice;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}