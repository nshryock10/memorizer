{"ast":null,"code":"import { v4 as uuid4 } from 'uuid';\nexport const API_ENDPOINT = process.env.PORT ? 'production URL' : 'http://localhost:4000';\nexport const getCategories = async () => {\n  const response = await fetch(`${API_ENDPOINT}/categories`, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  const categories = await response.json();\n  return categories;\n};\nexport const getLegends = async catId => {\n  const response = await fetch(`${API_ENDPOINT}/legends/${catId}`, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  const legends = await response.json();\n  return legends;\n};\nexport const updateAnswer = async (id, answer, acc) => {\n  const response = await fetch(`${API_ENDPOINT}/answer`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      id: id,\n      answer: answer,\n      accuracy: acc\n    })\n  });\n  const postAnswer = response.status;\n  return postAnswer;\n};\nexport const addLegend = async (catId, queue, legend) => {\n  const newId = uuid4();\n  const response = await fetch(`${API_ENDPOINT}/legend`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      id: newId,\n      catId: catId,\n      queue: queue,\n      legend: legend\n    })\n  });\n  const legendRes = await response.status;\n  return legendRes;\n};\nexport const editLegend = async (id, catId, queue, legend) => {\n  const response = await fetch(`${API_ENDPOINT}/legend/${id}`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON\n  });\n};","map":{"version":3,"names":["v4","uuid4","API_ENDPOINT","process","env","PORT","getCategories","response","fetch","method","headers","categories","json","getLegends","catId","legends","updateAnswer","id","answer","acc","body","JSON","stringify","accuracy","postAnswer","status","addLegend","queue","legend","newId","legendRes","editLegend"],"sources":["/Users/nickshryock/Documents/WebDevProjects/memorizer/client/src/utils/api.js"],"sourcesContent":["import { v4 as uuid4 } from 'uuid';\n\nexport const API_ENDPOINT = process.env.PORT ? 'production URL' : 'http://localhost:4000';\n\nexport const getCategories = async () => {\n\n    const response = await fetch(`${API_ENDPOINT}/categories`,{\n        method: \"GET\",\n        headers: {\n            \"Content-Type\": \"application/json\",\n        }\n    })\n\n    const categories = await response.json();\n\n    return categories\n}\n\nexport const getLegends = async (catId) => {\n    \n    const response = await fetch(`${API_ENDPOINT}/legends/${catId}`, {\n        method: \"GET\",\n        headers:{\n            \"Content-Type\": \"application/json\",\n        }\n    })\n\n    const legends = await response.json();\n\n    return legends;\n\n}\n\nexport const updateAnswer = async (id, answer, acc) => {\n\n    const response = await fetch(`${API_ENDPOINT}/answer`, {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n            id: id,\n            answer: answer,\n            accuracy: acc\n        })\n    })\n\n    const postAnswer = response.status;\n\n    return postAnswer\n}\n\nexport const addLegend = async (catId, queue, legend) => {\n    const newId = uuid4();\n\n    const response = await fetch(`${API_ENDPOINT}/legend`, {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n            id: newId,\n            catId: catId,\n            queue: queue,\n            legend: legend\n        })\n    })\n\n    const legendRes = await response.status;\n\n    return legendRes;\n}\n\nexport const editLegend = async (id, catId, queue, legend) => {\n\n    const response = await fetch(`${API_ENDPOINT}/legend/${id}`, {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\",\n        },\n        body: JSON\n    })\n}"],"mappings":"AAAA,SAASA,EAAE,IAAIC,KAAK,QAAQ,MAAM;AAElC,OAAO,MAAMC,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,IAAI,GAAG,gBAAgB,GAAG,uBAAuB;AAEzF,OAAO,MAAMC,aAAa,GAAG,MAAAA,CAAA,KAAY;EAErC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEN,YAAa,aAAY,EAAC;IACtDO,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACL,cAAc,EAAE;IACpB;EACJ,CAAC,CAAC;EAEF,MAAMC,UAAU,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;EAExC,OAAOD,UAAU;AACrB,CAAC;AAED,OAAO,MAAME,UAAU,GAAG,MAAOC,KAAK,IAAK;EAEvC,MAAMP,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEN,YAAa,YAAWY,KAAM,EAAC,EAAE;IAC7DL,MAAM,EAAE,KAAK;IACbC,OAAO,EAAC;MACJ,cAAc,EAAE;IACpB;EACJ,CAAC,CAAC;EAEF,MAAMK,OAAO,GAAG,MAAMR,QAAQ,CAACK,IAAI,CAAC,CAAC;EAErC,OAAOG,OAAO;AAElB,CAAC;AAED,OAAO,MAAMC,YAAY,GAAG,MAAAA,CAAOC,EAAE,EAAEC,MAAM,EAAEC,GAAG,KAAK;EAEnD,MAAMZ,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEN,YAAa,SAAQ,EAAE;IACnDO,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACL,cAAc,EAAE;IACpB,CAAC;IACDU,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MACjBL,EAAE,EAAEA,EAAE;MACNC,MAAM,EAAEA,MAAM;MACdK,QAAQ,EAAEJ;IACd,CAAC;EACL,CAAC,CAAC;EAEF,MAAMK,UAAU,GAAGjB,QAAQ,CAACkB,MAAM;EAElC,OAAOD,UAAU;AACrB,CAAC;AAED,OAAO,MAAME,SAAS,GAAG,MAAAA,CAAOZ,KAAK,EAAEa,KAAK,EAAEC,MAAM,KAAK;EACrD,MAAMC,KAAK,GAAG5B,KAAK,CAAC,CAAC;EAErB,MAAMM,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEN,YAAa,SAAQ,EAAE;IACnDO,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACL,cAAc,EAAE;IACpB,CAAC;IACDU,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MACjBL,EAAE,EAAEY,KAAK;MACTf,KAAK,EAAEA,KAAK;MACZa,KAAK,EAAEA,KAAK;MACZC,MAAM,EAAEA;IACZ,CAAC;EACL,CAAC,CAAC;EAEF,MAAME,SAAS,GAAG,MAAMvB,QAAQ,CAACkB,MAAM;EAEvC,OAAOK,SAAS;AACpB,CAAC;AAED,OAAO,MAAMC,UAAU,GAAG,MAAAA,CAAOd,EAAE,EAAEH,KAAK,EAAEa,KAAK,EAAEC,MAAM,KAAK;EAE1D,MAAMrB,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEN,YAAa,WAAUe,EAAG,EAAC,EAAE;IACzDR,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACL,cAAc,EAAE;IACpB,CAAC;IACDU,IAAI,EAAEC;EACV,CAAC,CAAC;AACN,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}