{"ast":null,"code":"var _jsxFileName = \"/Users/nickshryock/Documents/WebDevProjects/memorizer/src/Components/Practice.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport PracticeCard from \"./PracticeCard\";\nimport ToggleBar from \"./ToggleBar\";\nimport './Practice.css';\nimport { getLegend } from \"../utils/utils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Practice() {\n  _s();\n  const [cards, setCards] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [cardIndex, setCardIndex] = useState();\n  useEffect(() => {\n    setIsLoading(true);\n    getCards();\n    console.log(cards);\n  }, []);\n  const getCards = async () => {\n    const setCardArry = data => {\n      const cardData = data;\n      setCards(cardData);\n    };\n    const cardArry = await getLegend();\n    setCardArry(cardArry);\n    setCardIndex(0);\n    setIsLoading(false);\n  };\n  const handleLeftClick = () => {\n    const currIndex = cardIndex;\n    if (currIndex > 0) {\n      setCardIndex(currIndex - 1);\n    } else if (currIndex === 0) {\n      setCardIndex(cards.length - 1);\n    }\n  };\n  const handleRightClick = () => {\n    const currIndex = cardIndex;\n    if (cardIndex < cards.length - 1) {\n      setCardIndex(currIndex + 1);\n    } else if (cardIndex === cards.length - 1) {\n      setCardIndex(0);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [isLoading && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-input\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 24\n    }, this), cardIndex >= 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(ToggleBar, {\n        queue: cards[cardIndex].queue,\n        handleRightClick: handleRightClick,\n        handleLeftClick: handleLeftClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(PracticeCard, {\n        queue: cards[cardIndex].queue\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 14\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n}\n_s(Practice, \"SL+KAQsMAuBJ0y74ziRw/midN0Q=\");\n_c = Practice;\nexport default Practice;\nvar _c;\n$RefreshReg$(_c, \"Practice\");","map":{"version":3,"names":["React","useState","useEffect","PracticeCard","ToggleBar","getLegend","jsxDEV","_jsxDEV","Practice","_s","cards","setCards","isLoading","setIsLoading","cardIndex","setCardIndex","getCards","console","log","setCardArry","data","cardData","cardArry","handleLeftClick","currIndex","length","handleRightClick","children","className","fileName","_jsxFileName","lineNumber","columnNumber","queue","_c","$RefreshReg$"],"sources":["/Users/nickshryock/Documents/WebDevProjects/memorizer/src/Components/Practice.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport PracticeCard from \"./PracticeCard\";\nimport ToggleBar from \"./ToggleBar\";\nimport './Practice.css';\nimport { getLegend } from \"../utils/utils\";\n\nfunction Practice() {\n\n    const [cards, setCards] = useState([]);\n    const [isLoading, setIsLoading] = useState(false);\n    const [cardIndex, setCardIndex] = useState();\n\n    useEffect(() => {\n        setIsLoading(true)\n        getCards();\n        console.log(cards)\n    },[])\n\n    const getCards = async () => {\n\n        const setCardArry = (data) => {\n            const cardData = data;\n            setCards(cardData);\n        }\n\n        const cardArry = await getLegend();\n        setCardArry(cardArry);\n        setCardIndex(0)\n        setIsLoading(false);\n    }\n\n    const handleLeftClick = () => {\n        const currIndex = cardIndex;\n        if(currIndex > 0){\n            setCardIndex(currIndex - 1)\n        }else if(currIndex === 0){\n            setCardIndex(cards.length - 1)\n        }\n    }\n\n    const handleRightClick = () => {\n        const currIndex = cardIndex;\n        if(cardIndex < cards.length - 1){\n            setCardIndex(currIndex + 1)\n        }else if(cardIndex === cards.length - 1){\n            setCardIndex(0)\n        }\n    }\n\n  return (\n    <div>\n        { isLoading && <p className='text-input'>Loading...</p> }\n        \n        { cardIndex >= 0 &&\n            (<div>\n                <ToggleBar \n                    queue={cards[cardIndex].queue} \n                    handleRightClick={handleRightClick}  \n                    handleLeftClick={handleLeftClick}\n                />\n                <PracticeCard queue={cards[cardIndex].queue} />\n            </div>)\n        }\n    </div>\n  );\n}\n\nexport default Practice;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}