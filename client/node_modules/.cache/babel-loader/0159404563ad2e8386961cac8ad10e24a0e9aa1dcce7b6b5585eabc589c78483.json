{"ast":null,"code":"var _jsxFileName = \"/Users/nickshryock/Documents/WebDevProjects/memorizer/client/src/Components/Practice.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport PracticeCard from \"./PracticeCard\";\nimport ToggleBar from \"./ToggleBar\";\nimport './Practice.css';\nimport Review from \"./Review\";\nimport { getLegends, updateAnswer } from \"../utils/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Practice() {\n  _s();\n  const [cards, setCards] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [cardIndex, setCardIndex] = useState();\n  const [phase, setPhase] = useState('input');\n  const [answer, setAnswer] = useState();\n  const [legend, setLegend] = useState();\n  const [legendId, setLegendId] = useState();\n  useEffect(() => {\n    setIsLoading(true);\n    getCards();\n  }, []);\n  useEffect(() => {\n    if (cards && cardIndex >= 0) {\n      updateIndex();\n      setPhase('input');\n    }\n  }, [cardIndex]);\n  const updateIndex = async () => {\n    const setInputs = (leg, id) => {\n      setLegend(leg);\n      setLegendId(id);\n    };\n    const legend = cards[cardIndex].legend;\n    const id = cards[cardIndex].id;\n    setInputs(legend, id);\n  };\n  const getCards = async () => {\n    const setCardArry = data => {\n      const cardData = data;\n      setCards(cardData);\n    };\n    const cardArry = await getLegends(1); //getQueues()\n    setCardArry(cardArry);\n    setCardIndex(0);\n    setIsLoading(false);\n  };\n  const handleLeftClick = () => {\n    const currIndex = cardIndex;\n    if (currIndex > 0) {\n      setCardIndex(currIndex - 1);\n    } else if (currIndex === 0) {\n      setCardIndex(cards.length - 1);\n    }\n  };\n  const handleRightClick = () => {\n    const currIndex = cardIndex;\n    if (cardIndex < cards.length - 1) {\n      setCardIndex(currIndex + 1);\n    } else if (cardIndex === cards.length - 1) {\n      setCardIndex(0);\n    }\n  };\n  const handlePhaseChange = phaseChange => {\n    setPhase(phaseChange);\n  };\n  const handleFinish = async () => {\n    //trigger PUT request\n    console.log(legendsanswer);\n    const success = await updateAnswer(answer);\n    console.log(success);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [isLoading && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-input\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 24\n    }, this), cardIndex >= 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(ToggleBar, {\n        queue: cards[cardIndex].queue,\n        length: cards.length,\n        id: cardIndex + 1,\n        handleRightClick: handleRightClick,\n        handleLeftClick: handleLeftClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this), phase === 'input' && /*#__PURE__*/_jsxDEV(PracticeCard, {\n        queue: cards[cardIndex].queue,\n        setAnswer: setAnswer,\n        handlePhaseChange: handlePhaseChange,\n        handleFinish: handleFinish\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 21\n      }, this), phase === 'review' && /*#__PURE__*/_jsxDEV(Review, {\n        legend: legend,\n        answer: answer,\n        length: cards.length,\n        id: cardIndex + 1,\n        handleRightClick: handleRightClick,\n        handlePhaseChange: handlePhaseChange\n      }, legend, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 14\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n}\n_s(Practice, \"AAHAuWJSAVXDv/U1F0eN8qLjHto=\");\n_c = Practice;\nexport default Practice;\nvar _c;\n$RefreshReg$(_c, \"Practice\");","map":{"version":3,"names":["React","useState","useEffect","PracticeCard","ToggleBar","Review","getLegends","updateAnswer","jsxDEV","_jsxDEV","Practice","_s","cards","setCards","isLoading","setIsLoading","cardIndex","setCardIndex","phase","setPhase","answer","setAnswer","legend","setLegend","legendId","setLegendId","getCards","updateIndex","setInputs","leg","id","setCardArry","data","cardData","cardArry","handleLeftClick","currIndex","length","handleRightClick","handlePhaseChange","phaseChange","handleFinish","console","log","legendsanswer","success","children","className","fileName","_jsxFileName","lineNumber","columnNumber","queue","_c","$RefreshReg$"],"sources":["/Users/nickshryock/Documents/WebDevProjects/memorizer/client/src/Components/Practice.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport PracticeCard from \"./PracticeCard\";\nimport ToggleBar from \"./ToggleBar\";\nimport './Practice.css';\nimport Review from \"./Review\";\nimport { getLegends, updateAnswer } from \"../utils/api\";\n\nfunction Practice() {\n\n    const [cards, setCards] = useState([]);\n    const [isLoading, setIsLoading] = useState(false);\n    const [cardIndex, setCardIndex] = useState();\n    const [phase, setPhase] = useState('input');\n    const [answer, setAnswer] = useState();\n    const [legend, setLegend] = useState();\n    const [legendId, setLegendId] = useState();\n\n    useEffect(() => {\n        setIsLoading(true)\n        getCards();\n    },[])\n\n    useEffect(() => {\n        \n        if(cards && cardIndex >= 0){\n            updateIndex();\n            setPhase('input')\n        }\n\n    }, [cardIndex])\n\n    const updateIndex = async () => {\n\n        const setInputs = (leg, id) => {\n            setLegend(leg)\n            setLegendId(id)\n        }\n        \n        const legend = cards[cardIndex].legend;\n        const id = cards[cardIndex].id;\n        setInputs(legend, id)\n    }\n\n    const getCards = async () => {\n\n        const setCardArry = (data) => {\n            const cardData = data;\n            setCards(cardData);\n        }\n\n        const cardArry = await getLegends(1); //getQueues()\n        setCardArry(cardArry);\n        setCardIndex(0)\n        setIsLoading(false);\n    }\n\n    const handleLeftClick = () => {\n        const currIndex = cardIndex;\n        if(currIndex > 0){\n            setCardIndex(currIndex - 1)\n        }else if(currIndex === 0){\n            setCardIndex(cards.length - 1)\n        }\n    }\n\n    const handleRightClick = () => {\n        const currIndex = cardIndex;\n        if(cardIndex < cards.length - 1){\n            setCardIndex(currIndex + 1)\n        }else if(cardIndex === cards.length - 1){\n            setCardIndex(0)\n        }\n    }\n\n    const handlePhaseChange = phaseChange => {\n        setPhase(phaseChange)\n    }\n\n    const handleFinish = async () => {\n        //trigger PUT request\n        console.log(legendsanswer)\n        const success = await updateAnswer(answer)\n        console.log(success);\n    }\n\n  return (\n    <div>\n        { isLoading && <p className='text-input'>Loading...</p> }\n        { cardIndex >= 0 &&\n            (<div>\n                <ToggleBar \n                    queue={cards[cardIndex].queue} \n                    length={cards.length}\n                    id={cardIndex + 1}\n                    handleRightClick={handleRightClick}  \n                    handleLeftClick={handleLeftClick}\n                />\n                {phase === 'input' && \n                    <PracticeCard \n                        queue={cards[cardIndex].queue} \n                        setAnswer={setAnswer}\n                        handlePhaseChange={handlePhaseChange}\n                        handleFinish={handleFinish}\n                    />\n                }\n                {phase === 'review' && \n                    <Review \n                        key={legend}\n                        legend={legend}\n                        answer={answer}\n                        length={cards.length}\n                        id={cardIndex + 1}\n                        handleRightClick={handleRightClick}\n                        handlePhaseChange={handlePhaseChange}\n                    />\n                }\n\n            </div>)\n        }\n    </div>\n  );\n}\n\nexport default Practice;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,YAAY,MAAM,gBAAgB;AACzC,OAAOC,SAAS,MAAM,aAAa;AACnC,OAAO,gBAAgB;AACvB,OAAOC,MAAM,MAAM,UAAU;AAC7B,SAASC,UAAU,EAAEC,YAAY,QAAQ,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExD,SAASC,QAAQA,CAAA,EAAG;EAAAC,EAAA;EAEhB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACa,SAAS,EAAEC,YAAY,CAAC,GAAGd,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACe,SAAS,EAAEC,YAAY,CAAC,GAAGhB,QAAQ,CAAC,CAAC;EAC5C,MAAM,CAACiB,KAAK,EAAEC,QAAQ,CAAC,GAAGlB,QAAQ,CAAC,OAAO,CAAC;EAC3C,MAAM,CAACmB,MAAM,EAAEC,SAAS,CAAC,GAAGpB,QAAQ,CAAC,CAAC;EACtC,MAAM,CAACqB,MAAM,EAAEC,SAAS,CAAC,GAAGtB,QAAQ,CAAC,CAAC;EACtC,MAAM,CAACuB,QAAQ,EAAEC,WAAW,CAAC,GAAGxB,QAAQ,CAAC,CAAC;EAE1CC,SAAS,CAAC,MAAM;IACZa,YAAY,CAAC,IAAI,CAAC;IAClBW,QAAQ,CAAC,CAAC;EACd,CAAC,EAAC,EAAE,CAAC;EAELxB,SAAS,CAAC,MAAM;IAEZ,IAAGU,KAAK,IAAII,SAAS,IAAI,CAAC,EAAC;MACvBW,WAAW,CAAC,CAAC;MACbR,QAAQ,CAAC,OAAO,CAAC;IACrB;EAEJ,CAAC,EAAE,CAACH,SAAS,CAAC,CAAC;EAEf,MAAMW,WAAW,GAAG,MAAAA,CAAA,KAAY;IAE5B,MAAMC,SAAS,GAAGA,CAACC,GAAG,EAAEC,EAAE,KAAK;MAC3BP,SAAS,CAACM,GAAG,CAAC;MACdJ,WAAW,CAACK,EAAE,CAAC;IACnB,CAAC;IAED,MAAMR,MAAM,GAAGV,KAAK,CAACI,SAAS,CAAC,CAACM,MAAM;IACtC,MAAMQ,EAAE,GAAGlB,KAAK,CAACI,SAAS,CAAC,CAACc,EAAE;IAC9BF,SAAS,CAACN,MAAM,EAAEQ,EAAE,CAAC;EACzB,CAAC;EAED,MAAMJ,QAAQ,GAAG,MAAAA,CAAA,KAAY;IAEzB,MAAMK,WAAW,GAAIC,IAAI,IAAK;MAC1B,MAAMC,QAAQ,GAAGD,IAAI;MACrBnB,QAAQ,CAACoB,QAAQ,CAAC;IACtB,CAAC;IAED,MAAMC,QAAQ,GAAG,MAAM5B,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;IACtCyB,WAAW,CAACG,QAAQ,CAAC;IACrBjB,YAAY,CAAC,CAAC,CAAC;IACfF,YAAY,CAAC,KAAK,CAAC;EACvB,CAAC;EAED,MAAMoB,eAAe,GAAGA,CAAA,KAAM;IAC1B,MAAMC,SAAS,GAAGpB,SAAS;IAC3B,IAAGoB,SAAS,GAAG,CAAC,EAAC;MACbnB,YAAY,CAACmB,SAAS,GAAG,CAAC,CAAC;IAC/B,CAAC,MAAK,IAAGA,SAAS,KAAK,CAAC,EAAC;MACrBnB,YAAY,CAACL,KAAK,CAACyB,MAAM,GAAG,CAAC,CAAC;IAClC;EACJ,CAAC;EAED,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;IAC3B,MAAMF,SAAS,GAAGpB,SAAS;IAC3B,IAAGA,SAAS,GAAGJ,KAAK,CAACyB,MAAM,GAAG,CAAC,EAAC;MAC5BpB,YAAY,CAACmB,SAAS,GAAG,CAAC,CAAC;IAC/B,CAAC,MAAK,IAAGpB,SAAS,KAAKJ,KAAK,CAACyB,MAAM,GAAG,CAAC,EAAC;MACpCpB,YAAY,CAAC,CAAC,CAAC;IACnB;EACJ,CAAC;EAED,MAAMsB,iBAAiB,GAAGC,WAAW,IAAI;IACrCrB,QAAQ,CAACqB,WAAW,CAAC;EACzB,CAAC;EAED,MAAMC,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC7B;IACAC,OAAO,CAACC,GAAG,CAACC,aAAa,CAAC;IAC1B,MAAMC,OAAO,GAAG,MAAMtC,YAAY,CAACa,MAAM,CAAC;IAC1CsB,OAAO,CAACC,GAAG,CAACE,OAAO,CAAC;EACxB,CAAC;EAEH,oBACEpC,OAAA;IAAAqC,QAAA,GACMhC,SAAS,iBAAIL,OAAA;MAAGsC,SAAS,EAAC,YAAY;MAAAD,QAAA,EAAC;IAAU;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,EACrDnC,SAAS,IAAI,CAAC,iBACXP,OAAA;MAAAqC,QAAA,gBACGrC,OAAA,CAACL,SAAS;QACNgD,KAAK,EAAExC,KAAK,CAACI,SAAS,CAAC,CAACoC,KAAM;QAC9Bf,MAAM,EAAEzB,KAAK,CAACyB,MAAO;QACrBP,EAAE,EAAEd,SAAS,GAAG,CAAE;QAClBsB,gBAAgB,EAAEA,gBAAiB;QACnCH,eAAe,EAAEA;MAAgB;QAAAa,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACpC,CAAC,EACDjC,KAAK,KAAK,OAAO,iBACdT,OAAA,CAACN,YAAY;QACTiD,KAAK,EAAExC,KAAK,CAACI,SAAS,CAAC,CAACoC,KAAM;QAC9B/B,SAAS,EAAEA,SAAU;QACrBkB,iBAAiB,EAAEA,iBAAkB;QACrCE,YAAY,EAAEA;MAAa;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC9B,CAAC,EAELjC,KAAK,KAAK,QAAQ,iBACfT,OAAA,CAACJ,MAAM;QAEHiB,MAAM,EAAEA,MAAO;QACfF,MAAM,EAAEA,MAAO;QACfiB,MAAM,EAAEzB,KAAK,CAACyB,MAAO;QACrBP,EAAE,EAAEd,SAAS,GAAG,CAAE;QAClBsB,gBAAgB,EAAEA,gBAAiB;QACnCC,iBAAiB,EAAEA;MAAkB,GANhCjB,MAAM;QAAA0B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAOd,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAGL,CAAE;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEV,CAAC;AAEV;AAACxC,EAAA,CAlHQD,QAAQ;AAAA2C,EAAA,GAAR3C,QAAQ;AAoHjB,eAAeA,QAAQ;AAAC,IAAA2C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}