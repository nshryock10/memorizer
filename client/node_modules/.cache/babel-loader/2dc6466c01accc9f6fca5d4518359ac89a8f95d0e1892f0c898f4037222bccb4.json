{"ast":null,"code":"const convertToArry = text => {\n  //loop through text and push an object with each single word and correcy key (t/f)\n  //remove all punctuation\n  const noPunc = text.replace(/[.,\\/#!$%\\^&\\*;{}=\\-_`~()]/g, \"\");\n  //console.log(noPunc)\n  const removeSpace = noPunc.replace(/\\s{2,}/g, \" \");\n  //console.log(removeSpace)\n  const allLower = removeSpace.toLowerCase();\n  //console.log(allLower)\n\n  let finalArry = []; //array to put string in an object for each word\n\n  const stringSplit = allLower.split(\" \"); //split sentence into words separated by spaces\n  for (let i = 0; i < stringSplit.length; i++) {\n    finalArry.push({\n      word: stringSplit[i],\n      className: null\n    });\n  }\n  return finalArry;\n};\nexport const scoreAnswer = (answer, legend) => {\n  const answerArry = convertToArry(answer);\n  const legendArry = convertToArry(legend);\n  let correct = 0;\n  let incorrect = 0;\n  const totalLength = Math.min(answerArry.length, legendArry.length);\n  for (let i = 0; i < totalLength; i++) {\n    //check if first words match\n    if (legendArry[i].word == answerArry[i].word) {\n      //if they match count answer correct\n      legendArry[i].className = 'correct';\n      answerArry[i].className = 'correct';\n      correct++;\n    } else if (legendArry[i + 1] === answerArry[i]) {//check if word mathes next legend word\n      //count i incorrect for word\n      //count i + 1 correct\n      //move i forward \n    } else {\n      legendArry[i].className = 'incorrect';\n      answerArry[i].className = 'incorrect';\n      incorrect++;\n    }\n\n    //check if word matches next 2 legend words\n\n    //check if word matches previous legend word\n\n    //else count i incorrect\n  }\n\n  const accuracy = Math.round(correct / legendArry.length);\n  return [answerArry, legendArry, accuracy];\n};\nexport const getLegend = () => {\n  return [{\n    id: 1,\n    queue: 'Faith',\n    legend: 'I have been crucified with Christ. It is no longer I who live, but Christ who lives in me. And the life I now live in the flesh I live by faith in the Son of God, who loved me and gave himself for me. Galatians 2:20',\n    category: 'mentor group'\n  }, {\n    id: 2,\n    queue: 'First',\n    legend: 'But seek first his kingdom and his righteousness',\n    category: 'mentor group'\n  }, {\n    id: 3,\n    queue: 'Abba Father',\n    legend: 'God sent the spirit of his son, the spirit that calls out Abba Father',\n    category: 'mentor group'\n  }];\n};","map":{"version":3,"names":["convertToArry","text","noPunc","replace","removeSpace","allLower","toLowerCase","finalArry","stringSplit","split","i","length","push","word","className","scoreAnswer","answer","legend","answerArry","legendArry","correct","incorrect","totalLength","Math","min","accuracy","round","getLegend","id","queue","category"],"sources":["/Users/nickshryock/Documents/WebDevProjects/memorizer/client/src/utils/utils.js"],"sourcesContent":["const convertToArry = (text) => {\n\n    //loop through text and push an object with each single word and correcy key (t/f)\n        //remove all punctuation\n        const noPunc = text.replace(/[.,\\/#!$%\\^&\\*;{}=\\-_`~()]/g,\"\");\n        //console.log(noPunc)\n        const removeSpace = noPunc.replace(/\\s{2,}/g,\" \");\n        //console.log(removeSpace)\n        const allLower = removeSpace.toLowerCase();\n        //console.log(allLower)\n\n        let finalArry = []; //array to put string in an object for each word\n\n        const stringSplit = allLower.split(\" \"); //split sentence into words separated by spaces\n        for(let i=0; i < stringSplit.length; i++){\n            finalArry.push({\n                word: stringSplit[i],\n                className: null,\n            })\n        }\n        return finalArry;\n}\n\nexport const scoreAnswer = ( answer, legend ) => {\n    const answerArry = convertToArry(answer);\n    const legendArry = convertToArry(legend);\n    let correct = 0;\n    let incorrect = 0;\n\n    const totalLength = Math.min(answerArry.length, legendArry.length);\n\n    for(let i=0; i < totalLength; i++){\n\n        //check if first words match\n        if(legendArry[i].word == answerArry[i].word){\n            //if they match count answer correct\n            legendArry[i].className = 'correct';\n            answerArry[i].className = 'correct';\n            correct++;\n        }else if(legendArry[i + 1] === answerArry[i]){ //check if word mathes next legend word\n            //count i incorrect for word\n            //count i + 1 correct\n            //move i forward \n        }else{\n            legendArry[i].className = 'incorrect';\n            answerArry[i].className = 'incorrect';\n            incorrect++;\n        }\n\n        //check if word matches next 2 legend words\n\n        //check if word matches previous legend word\n\n        //else count i incorrect\n\n    }\n\n    const accuracy = Math.round((correct / (legendArry.length) ));\n\n    return [answerArry, legendArry, accuracy]\n\n}\n\nexport const getLegend = () => {\n return [{\n            id: 1,\n            queue: 'Faith',\n            legend: 'I have been crucified with Christ. It is no longer I who live, but Christ who lives in me. And the life I now live in the flesh I live by faith in the Son of God, who loved me and gave himself for me. Galatians 2:20',\n            category: 'mentor group'\n         },\n         {\n            id: 2,\n            queue: 'First',\n            legend: 'But seek first his kingdom and his righteousness',\n            category: 'mentor group'\n         },\n         {\n            id: 3,\n            queue: 'Abba Father',\n            legend: 'God sent the spirit of his son, the spirit that calls out Abba Father',\n            category: 'mentor group'\n         }\n        ]\n}"],"mappings":"AAAA,MAAMA,aAAa,GAAIC,IAAI,IAAK;EAE5B;EACI;EACA,MAAMC,MAAM,GAAGD,IAAI,CAACE,OAAO,CAAC,6BAA6B,EAAC,EAAE,CAAC;EAC7D;EACA,MAAMC,WAAW,GAAGF,MAAM,CAACC,OAAO,CAAC,SAAS,EAAC,GAAG,CAAC;EACjD;EACA,MAAME,QAAQ,GAAGD,WAAW,CAACE,WAAW,CAAC,CAAC;EAC1C;;EAEA,IAAIC,SAAS,GAAG,EAAE,CAAC,CAAC;;EAEpB,MAAMC,WAAW,GAAGH,QAAQ,CAACI,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;EACzC,KAAI,IAAIC,CAAC,GAAC,CAAC,EAAEA,CAAC,GAAGF,WAAW,CAACG,MAAM,EAAED,CAAC,EAAE,EAAC;IACrCH,SAAS,CAACK,IAAI,CAAC;MACXC,IAAI,EAAEL,WAAW,CAACE,CAAC,CAAC;MACpBI,SAAS,EAAE;IACf,CAAC,CAAC;EACN;EACA,OAAOP,SAAS;AACxB,CAAC;AAED,OAAO,MAAMQ,WAAW,GAAGA,CAAEC,MAAM,EAAEC,MAAM,KAAM;EAC7C,MAAMC,UAAU,GAAGlB,aAAa,CAACgB,MAAM,CAAC;EACxC,MAAMG,UAAU,GAAGnB,aAAa,CAACiB,MAAM,CAAC;EACxC,IAAIG,OAAO,GAAG,CAAC;EACf,IAAIC,SAAS,GAAG,CAAC;EAEjB,MAAMC,WAAW,GAAGC,IAAI,CAACC,GAAG,CAACN,UAAU,CAACP,MAAM,EAAEQ,UAAU,CAACR,MAAM,CAAC;EAElE,KAAI,IAAID,CAAC,GAAC,CAAC,EAAEA,CAAC,GAAGY,WAAW,EAAEZ,CAAC,EAAE,EAAC;IAE9B;IACA,IAAGS,UAAU,CAACT,CAAC,CAAC,CAACG,IAAI,IAAIK,UAAU,CAACR,CAAC,CAAC,CAACG,IAAI,EAAC;MACxC;MACAM,UAAU,CAACT,CAAC,CAAC,CAACI,SAAS,GAAG,SAAS;MACnCI,UAAU,CAACR,CAAC,CAAC,CAACI,SAAS,GAAG,SAAS;MACnCM,OAAO,EAAE;IACb,CAAC,MAAK,IAAGD,UAAU,CAACT,CAAC,GAAG,CAAC,CAAC,KAAKQ,UAAU,CAACR,CAAC,CAAC,EAAC,CAAE;MAC3C;MACA;MACA;IAAA,CACH,MAAI;MACDS,UAAU,CAACT,CAAC,CAAC,CAACI,SAAS,GAAG,WAAW;MACrCI,UAAU,CAACR,CAAC,CAAC,CAACI,SAAS,GAAG,WAAW;MACrCO,SAAS,EAAE;IACf;;IAEA;;IAEA;;IAEA;EAEJ;;EAEA,MAAMI,QAAQ,GAAGF,IAAI,CAACG,KAAK,CAAEN,OAAO,GAAID,UAAU,CAACR,MAAS,CAAC;EAE7D,OAAO,CAACO,UAAU,EAAEC,UAAU,EAAEM,QAAQ,CAAC;AAE7C,CAAC;AAED,OAAO,MAAME,SAAS,GAAGA,CAAA,KAAM;EAC9B,OAAO,CAAC;IACGC,EAAE,EAAE,CAAC;IACLC,KAAK,EAAE,OAAO;IACdZ,MAAM,EAAE,yNAAyN;IACjOa,QAAQ,EAAE;EACb,CAAC,EACD;IACGF,EAAE,EAAE,CAAC;IACLC,KAAK,EAAE,OAAO;IACdZ,MAAM,EAAE,kDAAkD;IAC1Da,QAAQ,EAAE;EACb,CAAC,EACD;IACGF,EAAE,EAAE,CAAC;IACLC,KAAK,EAAE,aAAa;IACpBZ,MAAM,EAAE,uEAAuE;IAC/Ea,QAAQ,EAAE;EACb,CAAC,CACD;AACT,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}